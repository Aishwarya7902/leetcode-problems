problem:https://leetcode.com/problems/single-number/
/*
brute force 
tc:o(n)
sc:o(n)
PSEUDO CODE
1.travese nums and update map with the frequecy of each element
2.traverse map and if frequency of any element is 1 return that element
*/
int singleNumber(vector<int>& nums) {
     unordered_map<int,int>mp;
        for(auto x:nums){
            mp[x]++;
        }
        for(auto it:mp){
            if(it.second==1){
                return it.first;
            }
        }
        return 0;
    }

/* FURTHER OPTIMISATION
tc: O(nlogn)+ O(n)=O((nlogn) here nlogn is for sorting and O(n) is for  traversing the nums vector
sc: O(1)
PSEUDO CODE
1.sort the nums vector 
2.traverse nums ,if two consecutive elements are same that means they occur twice ...the element which is not same as its next element will occur once
*/
int singleNumber(vector<int>& nums) {
       sort(nums.begin(),nums.end());
       int i;
        for(i=0;i<nums.size()-1;){
            
          if(nums[i]!=nums[i+1]){
             return nums[i];
          }
            else
            i=i+2;
        }
       return nums[i];
    }
