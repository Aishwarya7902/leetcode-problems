/*
brute force 
use two for loops and check is condition satisfies
tc:O(n*2)
sc:O(1)
*/

class Solution {
public:
    
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>v;
       for(int i=0;i<nums.size()-1;i++) {
          for(int j=i+1;j<nums.size();j++){
              if(nums[i]+nums[j]==target){
                  v.push_back(i+1);
                  v.push_back(j+1);
              }
          }
       }
        return v;
    }
};

/*
optimisation
There are two good approaches to solve this problem.
Hint: As given array is sorted, we might use two pointer technique / binary search.

Two pointer technique.
time complexity: O(N)
space complexity: O(1)
We can exploit the sorted property of an array.
Let's say for indices i & j such that i<j,
if sum of elements A[i]+A[j] == target, then we are done
else check whether A[i]+A[j] > target, then last element has to be removed to reduce the value of sum (j--).
similarly if A[i]+A[j] < target, we have to add little to increase the sum (i++).
*/


class Solution {
public:
    
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int>v;
        int sum;
        int i=0,j=nums.size()-1;
       while(i<j) {
              sum=nums[i]+nums[j];
              if(sum==target){
                  v.push_back(i+1);
                  v.push_back(j+1);
                  break;
              }
           else if(sum>target){
               j--;
           }
           else{
               i++;
           }
          
       }
        return v;
    }
};

/*
for binary search approach visit :https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/discuss/261140/C%2B%2B-with-explanation-Clear-and-simple

time complexity: O(NlogN) in worst (if elements are together in right extreme)
space complexity: O(1)
*/
