/*brute force
tc:
sc:
*/
#include<bits/stdc++.h>
class Solution {
public:
    bool IfContains(string &s1,string &s2){
        if(s1.find(s2) != string::npos)
            return true;
        else
            
        return false;
    }
    int longestStrChain(vector<string>& words) {
        int j,k,count;
        int maxi=INT_MIN;
        for(int i=0;i<words.size()-1;i++){
            j=i;
            
            while(j<words.size()-1){
                count=1;
                k=j+1;
                if(IfContains(words[k],words[j]) && (words[k].size()-words[j].size()==1)){
                   count++;
                    j=k;
                    k++;
                }
                else{
                    k++;
                }
            }
            maxi=max(maxi,count);
        } 
        return maxi;
    }
};

/* optimisation using lis
video:https://youtu.be/HX3xggriPTo
note: see the discussion section of leetcode for better understanding
tc:
sc:
*/
#include<bits/stdc++.h>
class Solution {
public:
    bool isPre(string &s1,string &s2){
        int i,j,cnt;
        i=j=cnt=0;
        while(cnt<2 && i<s1.size()){
            if(s1[i]!=s2[j]){
                cnt++;
                j++;
            }
            else{
                i++;
                j++;
            }
        }
        return cnt<=1;
    }
    static bool cmp(string &s1,string&s2){
        return s1.size()<s2.size();
    }
    int longestStrChain(vector<string>& words) {
        int n=words.size(),ans=1,i,j;
        sort(words.begin(),words.end(),cmp);
        vector<int>dp(n,1);
        for(i=0;i<n;i++){
            for(j=i+1;j<n;j++){
                if(words[j].size()-words[i].size()>1)break;
                if(words[j].size()-words[i].size()==1 && isPre(words[i],words[j])){
                    dp[j]=max(dp[j],1+dp[i]);
                    ans=max(ans,dp[j]);
                }
            }
        }
        return ans;
    }
};
