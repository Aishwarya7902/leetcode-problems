PROBLEM:https://leetcode.com/problems/maximum-depth-of-binary-tree/
VIDEO:https://youtu.be/eD3tmO66aBA
TC:O(N)
SC:O(N) // IN WORST CASE
class Solution {
public:
    int maxDepth(TreeNode* root) {
       if(root==NULL){
           return 0;
       } 
        int lh=maxDepth(root->left);
        int rh=maxDepth(root->right);
        return max(lh,rh)+1;
    }
};

/*APPROACH 2   LEVEL ORDER TRAVERSAL(getting TLE)
         if(root==NULL){
           return 0;
       } 
        int depth=0;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            int size=q.size();
            depth++;
            for(int i=0;i<size;i++){
            TreeNode* temp=q.front();
            q.pop();
                if(temp->left!=NULL){
                  q.push(root->left);  
                }
                 if(temp->right!=NULL){
                  q.push(root->right);  
                }
            }
            
        }
        return depth;
