problem:https://leetcode.com/problems/house-robber/


*****************************RECURSIVE**************///GETTING TLE
class Solution {
public:
    int help(vector<int>& num,int n){
       
        if(n==0)return 0;
        if(n==1)return num[0];
       
        
        int mn=INT_MIN;
        
        return max(mn,max(help(num,n-1),num[n-1]+help(num,n-2)));
    }
    int rob(vector<int>& num) {
       return help(num,num.size()); 
    }
};

******************************************MEMOIZATION(TOP DOWN)*****************************/////GETTING TLE

class Solution {
public:
    int help(vector<int>& num,int n){
       
        if(n==0)return 0;
        if(n==1)return num[0];
         int dp[n+1];
        for(int i=0;i<=n;i++){
            dp[i]=-1;
        }
        if(dp[n]!=-1)return dp[n];
        int mn=INT_MIN;
        
        return dp[n]=max(mn,max(help(num,n-1),num[n-1]+help(num,n-2)));
    }
    int rob(vector<int>& num) {
       return help(num,num.size()); 
    }
};


********************************BOTTOM UP (TABULATION)  ****************************
TIME:O(N)
SPACE:O(N)
class Solution {
public:
    int rob(vector<int>& num) {
        int  n=num.size();
        if(n==0)return 0;
        vector<int>dp(n+1,0);
        dp[1]=num[0];
        for(int i=2;i<=n;i++){
            dp[i]=max(dp[i-1],dp[i-2]+num[i-1]);
        }
        return dp[n];
        
        
    }
};
**************************************************SPACE OPTIMISED SOLUTION************************************
TIME:O(N)
SPACE:O(1)
class Solution {
public:
    int rob(vector<int>& num) {
        int  n=num.size();
        if(n<=0)return 0;
        if(n==1)return num[0];
        if(n==2){
            return max(num[0],num[1]);
        }
        int prev1=0,prev2=num[0];
        
        
        
        for(int i=1;i<n;i++){
            num[i]=max(prev2,prev1+num[i]);
            prev1=prev2;
            prev2=num[i];
            
            
        }
        
        return num[n-1];
        
    }
};
