problem:https://leetcode.com/problems/min-cost-climbing-stairs/
video explanation:https://youtu.be/kLCGmZGtImM

*************************METHOD 1 USING TOP DOWN***********************************
TIME:O(N)
SPACE:O(N)
class Solution {
public:
     int help(vector<int>& cost,int indx,vector<int>&t){
         
       if(indx==cost.size()-1 ||indx==cost.size()-2)return cost[indx];
         
         if(t[indx]!=0)return t[indx];
         int a=help(cost,indx+1,t);
         int b=help(cost,indx+2,t);
         return t[indx]=min(a,b)+cost[indx];
     }
    int minCostClimbingStairs(vector<int>& cost) {
        if(cost.size()==2)return min(cost[0],cost[1]);
        vector<int>t(1001);
       int x=help(cost,0,t);
        int y=help(cost,1,t);
        return min(x,y);
    }
};
*********************SPACE OPTIMISATION*********************************
//LEARNING: TO IMPROVE SPACE COMPLEXITY WE CAN MAKE CHANGES IN THE GIVEN ARRAY ITSELF IF POSSIBLE
TC:O(n)
SC:O(1)

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n=cost.size();
        for(int i=2;i<n;i++)
            cost[i]=min(cost[i-1],cost[i-2])+cost[i];
        return min(cost[n-1],cost[n-2]);
    }
};
