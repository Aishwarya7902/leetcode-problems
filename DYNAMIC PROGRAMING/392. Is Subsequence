problem:https://leetcode.com/problems/is-subsequence/
video:https://youtu.be/QVntmksK2es
*********************************************DYNAMIC PROGRAMMING APPROACH********************************************************
time:O(n*m)
space:O(n*m)
class Solution {
public:
     int lcs(int x, int y, string s1, string s2)
    {
        // your code here
        int t[x+1][y+1];
        for(int i=0;i<x+1;i++){
            for(int j=0;j<y+1;j++){
                if(i==0 || j==0)
                t[i][j]=0;
            }
        }
        for(int i=1;i<x+1;i++){
            for(int j=1;j<y+1;j++){
                if(s1[i-1]==s2[j-1]){
                    t[i][j]=1+t[i-1][j-1];
                }
                else{
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
                }
            }
        }
        return t[x][y];
     }
    bool isSubsequence(string s, string t) {
        int m=s.size();
         int n=t.size();
        if(lcs(m,n,s,t)==m)return true;
        else
            return false;
    }
};
*********************************************RECURSIVE****************************************************
class Solution {
public:
     bool isSubs(int m,int n,string s, string t){
         if(m==0)return true;
         if(n==0)return false;
         if(s[m-1]==t[n-1])return isSubs(m-1,n-1,s,t);
         
             return isSubs(m,n-1,s,t);
         
     }
    bool isSubsequence(string s, string t) {
        int m=s.size();
         int n=t.size();
       return isSubs(m,n,s,t);
    }
};
***************************************************TWO POINTER APPROACH(BEST OPTIMISED SOLN)********************************************
time:O(n)
space:O(1)
 bool isSubsequence(string s, string t) {
        int m=s.size();
         int n=t.size();
      int i=0,j=0;
        while(i<m && j<n){
            if(s[i]==t[j]){
                i++;
            }
            j++;
        }
        return i==m ? 1 :0;
    }
