problem:leetcode.com/problems/linked-list-cycle/
BEST EXPLAINATION:
https://www.linkedin.com/in/mayank-singh-1004981a4/recent-activity/shares/



/* 
BRUTE FORCE
TC:O(N)
SC:O(N)
PSEUDO CODE
the idea is simple we store every node in a hashmap and while traversing the list,if we encounter some node which is already present in the map ,we know there must be a cycle
COZ CYCLE ITSELF MEANS: There is a cycle in a linked list if there is some node in the list that can be reached again .
NOTE : WE WILL STORE POINTER CORRESPONDING TO EACH NODE NOT THE VALUE ITSELF
*/

bool hasCycle(ListNode *head) {
      unordered_map<ListNode *,int>mp;
      ListNode* temp=head;
        while(temp){
           if(mp.find(temp)!=mp.end())return true;
            else
                mp[temp]=1;
            temp=temp->next;
        }
        return false;
    }
    
    /*FURTHER OPTIMISATION
    TC:O(N)
    SC:O(1)
    PSEUDO CODE  as well as learning:
   1. we  will use the concept of fast and slow pointer here ,lets say we start our slow pointer from position 1 and fast from one position ahead of slow 
    fast  moves faster than slow 
   2. now if someone is already fast and he started a position ahead then if there isn't any loop then slow will never catch fast ...right?
   3.but if there is a loop then only slow can catch fast
   4.getting idea why fast is kept ahead of slow..............???????
   5.now we know that fast and slow will have speed  difference...but by how much?
   actually we can choose any speeds as long as their speed difference is coprime with the lenght of linked list
   but here we dont know the lenght n
   6. 1 IS A NUMBER WHICH IS COPRIME WITH EVERY NUMBER............RIGHT????
   7.so slow moves by one step and fast moves by two steps and hence speed difference is 1
   8.getting idea why fast moves by 2 steps and slow moves by 1 step..........??????????
   
   */
   
   bool hasCycle(ListNode *head) {
      if(head==NULL)return 0;
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast && fast->next){
            if(slow==fast)return 1;
            slow=slow->next;
            fast=fast->next->next;
        }
        return 0;
    }
