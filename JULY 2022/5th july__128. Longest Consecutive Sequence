PROBLEM:https://leetcode.com/problems/longest-consecutive-sequence/


/*brute force
tc:O(nlogn)
sc:O(1)
pseudo code
1.sort array
2.take an ans variable and initialize with -infinity
3.take a count initialize with 1
4.initialize an i pointer at 0
5.traverse in array while i<nums.size()-1 .....not i<nums.size().....coz since we are doing nums[i+1]-nums[i] hence it may give runtime error
6.if(nums[i+1]-nums[i]==1){
count++;
i++;
}
7.else if(nums[i+1]-nums[i]==0){

            i++;
        }
8.else{
ans=max(ans,count);
count=1;
i++;
}

            here we set count with 1 because we are starting a new sequence coz yaaha par continuity break hui hai  and at the same time update our ans too with count before breaking the continuity
9.at last we update ans with max of ans and count coz it might happen ki hum else me kabhi enter hi na kiye ho
10.finally return ans

*/

class Solution {
public:
    int ans=INT_MIN;
    int longestConsecutive(vector<int>& nums) {
        if(nums.size()<1)
            return 0;
        else if(nums.size()==1)
            return 1;
            
        sort(nums.begin(),nums.end());
        
        int count=1;
        int i=0;
        while(i<nums.size()-1){
            if(nums[i+1]-nums[i]==1){
                count++;
                i++;
            }
            else if(nums[i+1]-nums[i]==0){
                
                i++;
            }
                else{
                ans=max(ans,count);
                count=1;
                i++;
                }
            
        }
        
        return max(ans,count);
    }
};

/*METHOD 2 (very much time taking yar)
video:https://youtu.be/Ox08GdK9NrE
*/
int longestConsecutive(vector<int>& nums) {
       unordered_set<int>sets(nums.begin(),nums.end());
        int ans=0;
        for(int it:nums){
            if(sets.find(it)==sets.end()){
                continue;
            }
            
                int prev=it-1,next=it+1;
                while(sets.find(prev)!=sets.end()){
                    prev--;
                }
               while(sets.find(next)!=sets.end()){
                next++;
               }
            ans=max(ans,next-prev-1);
            sets.erase(it);
            
        }
        return ans;
    }
